@page "/fetchdata"
@inject HttpClient Http

<h1>Star Wars Species</h1>

<p>This component demonstrates fetching data from the server.</p>
@if (speciesList.Count == 0)
{
    <p><em>Loading...</em></p>
}
else
{
    <div style="margin-bottom: 10px;">
        <button class="btn btn-secondary" onclick="@LoadAllSpecies" hidden="@allSpeciesLoaded">Load All Species</button>
        <button class="btn btn-secondary" onclick="@Reset">Reset The Page</button>
    </div>
    <table class="table">
        <thead>
            <tr>
                <th>Name</th>
                <th>Classification</th>
                <th>Designation</th>
                <th>Average Height</th>
                <th>Skin Colors</th>
                <th>Language</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var species in speciesList)
            {
            <tr>
                <td>@species.name</td>
                <td>@species.classification</td>
                <td>@species.designation</td>
                <td>@species.average_height</td>
                <td>
                    @foreach(var color in species.skin_colors.Split(','))
                    {
                    <div style="color: @color">@color</div>
                    }
                </td>
                <td>@species.language</td>
            </tr>
            }
        </tbody>
    </table>
}

<style>
.hidden {
    display: none;
}
</style>

@functions {
    List<Species> speciesList = new List<Species>();
    private bool allSpeciesLoaded = false;

    protected override async Task OnInitAsync()
    {
        speciesList = await GetSpecies();
    }

    private async Task<List<Species>> GetSpecies(bool all = false)
    {
        var nextUrl = "https://swapi.co/api/species";
        var species = new List<Species>();
        do
        {
            var speciesResponse = await Http.GetJsonAsync<SpeciesResponse>(nextUrl);
            species.AddRange(speciesResponse.results);
            nextUrl = speciesResponse.next;
            Console.WriteLine(nextUrl);
        } while (!String.IsNullOrEmpty(nextUrl) && all);
        return species;
    }

    private async Task LoadAllSpecies()
    {
        speciesList = new List<Species>();
        speciesList = await GetSpecies(true);
        allSpeciesLoaded = true;
    }

    private async Task Reset()
    {
        allSpeciesLoaded = false;
        speciesList = new List<Species>();
        speciesList = await GetSpecies();

    }

    class SpeciesResponse
    {
        public int count { get; set; }
        public List<Species> results { get; set; }
        public string next { get; set; }
    }

    class Species
    {
        public string name { get; set; }
        public string classification { get; set; }
        public string designation { get; set; }
        public string average_height { get; set; }
        public string skin_colors { get; set; }
        public string language { get; set; }

    }
}
