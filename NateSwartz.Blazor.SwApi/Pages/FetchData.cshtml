@page "/fetchdata"
@inject HttpClient Http

<h1>Star Wars Characters</h1>

<p>This component demonstrates fetching data from the server.</p>
@if (peopleList.Count == 0)
{
    <p><em>Loading...</em></p>
}
else
{
    <div style="margin-bottom: 10px;">
        <button class="ui button" onclick="@LoadAllPeople" hidden="@allItemsLoaded">Load All People</button>
        <button class="ui button" onclick="@Reset">Reset The Page</button>
    </div>
    <table class="ui table">
        <thead>
            <tr>
                <th>Name</th>
                <th>Hair Color</th>
                <th>Species</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var person in peopleList)
            {
                <tr>
                    <td>@person.name</td>
                    <td>@person.hair_color</td>
                    <td><img src=@person.image/></td>
                    <td><div style="color:darkblue;cursor:pointer" onclick="@(e => SelectSpecies(person))">@person.species_name</div></td>
                </tr>
            }
        </tbody>
    </table>
    <div class="ui buttons">
        <button class="ui button" onclick="@LoadPrevious" hidden="@(currentPage < 2)">Previous</button>
        <button class="ui button" onclick="@LoadNext">Next</button>
    </div>
}

<div class="ui mini modal">
    <div class="ui header">
        Species Info
    </div>
    <div class="content">
        <div>Name - @selectedSpecies.name</div>
        <div>Language - @selectedSpecies.language</div>
        <div>Classification - @selectedSpecies.classification</div>
        <div>Designation - @selectedSpecies.designation</div>
        <div>Skin Colors - @selectedSpecies.skin_colors</div>
    </div>
</div>

<style>
    .hidden {
        display: none;
    }
</style>

@functions {
    List<Person> peopleList = new List<Person>();
    private bool allItemsLoaded = false;
    private bool hasPrevious = false;
    private Species selectedSpecies = new Species();
    private int currentPage = 1;
    private Dictionary<string, string> speciesTable = new Dictionary<string, string>();

    protected override async Task OnInitAsync()
    {
        peopleList = await GetPeople();
    }

    private async Task<List<Person>> GetPeople(bool all = false, string startingUrl = "https://swapi.co/api/people")
    {
        var nextUrl = startingUrl;
        var people = new List<Person>();
        do
        {
            var peopleResponse = await Http.GetJsonAsync<PeopleResponse>(nextUrl);
            people.AddRange(peopleResponse.results);
            nextUrl = peopleResponse.next;
            var pieces = nextUrl.Split('=');
            currentPage = int.Parse(pieces[pieces.Length - 1]) - 1;
            Console.WriteLine(currentPage);
            Console.WriteLine(nextUrl);
        } while (!String.IsNullOrEmpty(nextUrl) && all);

        foreach (var person in people)
        {
            if (person.species.Length > 0)
            {
                if (!speciesTable.ContainsKey(person.species[0]))
                {
                    var species = await Http.GetJsonAsync<Species>(person.species[0]);
                    person.species_name = species.name;
                    speciesTable[person.species[0]] = species.name;
                    Console.WriteLine("Made request for species");
                }
                else
                {
                    person.species_name = speciesTable[person.species[0]];
                }
                var formattedName = person.name.Replace(' ', '-');
                Console.WriteLine(formattedName);
                var imageResponse = await Http.GetAsync("http://localhost:8080/api/images/characters/" + formattedName);
                var url = await imageResponse.Content.ReadAsStringAsync();
                if (!String.IsNullOrEmpty(url))
                {
                    person.image = url;

                }
            }
            else
            {
                person.species_name = "Unknown";
            }
        }
        return people;
    }

    private async Task LoadAllPeople()
    {
        peopleList = new List<Person>();
        peopleList = await GetPeople(true);
        Console.WriteLine(peopleList.Count);
        allItemsLoaded = true;
    }

    private async Task LoadNext()
    {
        Console.WriteLine(currentPage);
        peopleList = new List<Person>();
        allItemsLoaded = false;
        peopleList = await GetPeople(false, "https://swapi.co/api/people/?page=" + (currentPage + 1));
        selectedSpecies = new Species();
        Console.WriteLine(peopleList.Count);
        Console.WriteLine("Ending LoadNext");
    }

    private async Task LoadPrevious()
    {
        Console.WriteLine(currentPage);
        peopleList = new List<Person>();
        allItemsLoaded = false;
        peopleList = await GetPeople(false, "https://swapi.co/api/people/?page=" + (currentPage - 1));
        selectedSpecies = new Species();
    }

    private async Task Reset()
    {
        peopleList = new List<Person>();
        allItemsLoaded = false;
        peopleList = await GetPeople();
        selectedSpecies = new Species();
    }

    private async Task SelectSpecies(Person person)
    {
        if (person.species.Length > 0)
        {
            selectedSpecies = await Http.GetJsonAsync<Species>(person.species[0]);
        }
        else
        {
            selectedSpecies = new Species { name = "Unknown" };
        }
        RegisteredFunction.Invoke<string>("Show Modal");
    }
}
